        function main
        startnow;

        ifplot=0
        if(ifplot==1)
%
        make_plot()
        stopnow
    end

        m=500
        k=10
%

%
%        basic parameters
%
        nruns = 1000

        errs_in = zeros(1,nruns);
        errs_out = zeros(1,nruns);

        parfor irun=1:nruns

        rng(irun)

        nmin=m
        delta = .3;
        nin = randi(500) + nmin
        nout = nin;
        n = nin+nout
        gam_in = m/nin;
        sig = 1;
%
%        signal eigenvalues, signal, noise
%
        ells = 2*rand() + [k:-1:1] +  sig^2*sqrt(gam_in) / delta;
        [x,ep,imask] = make_data(m,n,ells,k,delta);
        ep = sig*ep;

%
%        split into in-sample and out-of-sample data
%
        xin=x(:,1:nin);
        xout=x(:,nin+1:n);

        var_ep = sig^2*ones(m,1);
        epin=ep(:,1:nin);
        epout=ep(:,nin+1:n);

        imask_in = imask(:,1:nin);
        imask_out=imask(:,nin+1:n);

        yin = imask_in .* (xin+epin);


        bedge = delta*sig^2*(1+sqrt(gam_in))^2;

        yout = imask_out .* (xout+epout);


        [xin_est,xout_est,errs_hat,wvals] = lintr_inout(yin,yout,...
           imask_in,imask_out,m,nin,nout,k,var_ep);


%%%        norm(diag(wvals)*(xin_est - xin),'fro')^2 / nin
%%%        norm(diag(wvals)*(xout_est - xout),'fro')^2 / nout
%%%        sum(errs_hat)

        errs_in(irun) = norm(xin_est - xin,'fro') / norm(xin,'fro');
        errs_out(irun) = norm(xout_est - xout,'fro') / norm(xout,'fro');
    end

        errs_in
        errs_out

        save('oos3.mat','errs_in','errs_out')


        stopnow
        end
%
%
%
%
%
        function make_plot()
%
        load oos3.mat

        ifig = figure;
        hold on;
%%%        plot(mean(errs_out,1))
%%%        plot(mean(errs_in,1))



        scatter(errs_out,errs_in,100,'k.')


        xmin=min(min(errs_out),min(errs_in))
        xmax=max(max(errs_out),max(errs_in))


        xx=linspace(xmin,xmax,300);
        plot(xx,xx,'LineWidth',2)


        xlim([xmin,xmax])
        ylim([xmin,xmax])


        stopnow


        xlabel('Out-of-sample MSE','Interpreter','latex','FontSize',20)
        ylabel('In-sample MSE','Interpreter','latex','FontSize',20)

        set(figure(ifig),'Position',[500,500,600,500])

        set(figure(ifig),'PaperPositionMode','auto')
        print('fig69','-dpng','-r0')
        print(figure(ifig),'fig69','-depsc','-r0')
        print(figure(ifig),'fig69','-djpeg','-r0')
        print(figure(ifig),'fig69','-dpdf','-r0')

        end
%
%
%
%
%
        function [x,ep0,imask] = make_data(m,n,ells,k,delta)
%

        u = randn(m,k);


        u(:,1)=u(:,1) / norm(u(:,1));

        for i=2:k

        for ijk=1:2
        for j=1:i-1
%
        pij = sum(u(:,i).*u(:,j));
        u(:,i) = u(:,i) - pij*u(:,j);
    end
        u(:,i) = u(:,i) / norm(u(:,i));

    end
    end
        chk0 = norm(u'*u - eye(k))
        zs = randn(n,k);

        ps = delta*ones(m,n);

        ff = rand(m,n);
        imask = real(ff <= ps);

        x = u*diag(ells)*zs';

%%%        xmu = 10*randn(m,1) / sqrt(m);
%%%        x = x + repmat(xmu,1,n);
        ep0=randn(m,n);


        end
%
%
%
%
%
        function [x_est,x_est2,x_opt,x_nuc,x_raj,k_new] = test_all(y,imask,m,n,k,...
            sig,var_ep,delta,bedge)
%
%
%        run shrinkage with known rank
%
        as = imask;
        [xmean,as2_mean,yback] = lintr_mean_diag(y,as,m,n);
        y2=y-repmat(xmean,1,n).*as;

%%%        kest77 = min(m,n);
        kest77 = k;

        var_ep0 = sig^2*var_ep;
        [x_est,whts,errs] = lintr_whit(y2,as,m,n,kest77,var_ep0);
        x_est = x_est + repmat(xmean,1,n);

        ss=svds(x_est,k);
        k_new = sum(ss > 1d-8)

%
%        run shrinkage with unknown rank
%
        as = imask;
        [xmean,as2_mean,yback] = lintr_mean_diag(y,as,m,n);
        y2=y-repmat(xmean,1,n).*as;

        var_ep = sig^2*ones(m,1);
        kest77 = min(m,n);
        [x_est2,whts,errs] = lintr_whit(y2,as,m,n,kest77,var_ep0);
        x_est2 = x_est2 + repmat(xmean,1,n);


%
%        run OptShrink
%
        bedge2=sig^2*bedge;
        [x_raj,errs] = lintr_unif2(y2,as,m,n,k,bedge2);
        x_raj = x_raj + repmat(xmean,1,n);

%%%        svd(x_raj)
%%%        svd(x_est)

%%%stopnow

%%%        x_nuc=zeros(m,n);
%%%        x_opt=zeros(m,n);
%%%        return
%
%        OptSpace
%
        niter=[]
        tol=[]
        kest=k;
        [x_opt,u_opt,s_opt,v_opt] = call_optspace(y,...
           m,n,kest,niter,tol);

%
%        nuclear norm minimization
%
%%%        rlam=sig*(sqrt(m) + sqrt(n))*sqrt(delta);
%%%        iis=find(imask==1);
%%%        len=length(iis);

        thresh=1d-8;
        w0=x_est;
        niter=2000;
%%%        [x_nuc,nmax,rlam] = lsnuc_wrap_agm(y,imask,m,n,w0,niter,thresh,sig);
%%%        [x_nuc,nmax,rlam,whts] = lsnuc_wrap_agm2(y,imask,m,n,w0,niter,thresh,pvec,sig);


        pvec=delta*ones(m,1);
        [rlam,rs,cs] = lsnuc_find_rlam(var_ep0,pvec,m,n,20);
        [x_nuc,nmax,whts] = lsnuc_wrap_agm2_color(y,imask,...
            m,n,w0,niter,thresh,rlam,rs,cs);



        end
%
%
%
%
%
        function [xs_opt,u_opt,s_opt,v_opt] = call_optspace(ys,...
           m,n,k,niter,tol)

        ys_sparse = sparse(ys);
        [u_opt,s_opt,v_opt,dist] = OptSpace(ys_sparse,k,niter,tol);

        xs_opt = u_opt * s_opt * v_opt';


        end
%
%
%
%
%
        function startnow
%
        delete out13
        diary('out13')
        diary on
%
        format short E
%%%        format long E


%
        rng('default');

        end
%
%
%
%
%
        function stopnow
%
        diary off
        stop

        end
